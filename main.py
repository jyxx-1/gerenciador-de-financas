import datetime

# Importa a CLASSE Transacao do M√ìDULO transacao
from transacao import Transacao

# Importa a CLASSE GerenciadorFinanceiro do M√ìDULO gerenciador_financeiro
from gerenciador_financeiro import GerenciadorFinanceiro


def exibir_menu():
    """
    Exibe o menu principal de op√ß√µes ao usu√°rio.
    """
    print("\n===== Gestor de Finan√ßas Pessoais =====")
    print("1. Adicionar nova transa√ß√£o")
    print("2. Listar todas as transa√ß√µes")
    print("3. Exibir saldo atual")
    print("4. Sair")
    print("==============================================")


def adicionar_nova_transacao(gerenciador: GerenciadorFinanceiro):
    """
    Solicita os dados de uma nova transa√ß√£o ao usu√°rio e a adiciona.

    A fun√ß√£o inclui valida√ß√µes para garantir que o valor e a data
    sejam inseridos em formatos corretos, solicitando novamente se
    a entrada for inv√°lida.

    Args:
        gerenciador (GerenciadorFinanceiro): A inst√¢ncia do gerenciador
        onde a nova transa√ß√£o ser√° adicionada.
    """
    print("\n--- Adicionar Nova Transa√ß√£o ---")
    descricao = input("Descri√ß√£o: ")

    # Loop para valida√ß√£o do valor inserido >
    while True:
        try:
            valor_str = input("Valor (use sinal de - para despesas, ex: -10.46): ")
            valor = float(valor_str)
            break
        except ValueError:
            print("Valor inv√°lido. Por favor, insira um n√∫mero (ex: 100.00 ou -25.30).")

    # Loop para valida√ß√£o da data >
    while True:
        try:
            data_str = input("Data (DD-MM-AAAA): ")
            data = datetime.datetime.strptime(data_str, "%d-%m-%Y").date()
            break
        except ValueError:
            print("Formato de data inv√°lido. Por favor, use DD-MM-AAAA.")

    nova_transacao = Transacao(descricao, valor, data)
    gerenciador.adicionar_transacao(nova_transacao)


# Ponto de Entrada Principal do Programa >
if __name__ == "__main__":
    gerenciador = GerenciadorFinanceiro(db_name="financas.db")

    while True:
        # O la√ßo principal (cora√ß√£o da interatividade) executa repetidamente o menu
        # at√© que o usu√°rio escolha a op√ß√£o de sair.
        exibir_menu()
        escolha = input("Escolha uma op√ß√£o: ")

        if escolha == "1":
            adicionar_nova_transacao(gerenciador)
        elif escolha == "2":
            transacoes_todas = gerenciador.listar_transacoes()
            if not transacoes_todas:
                print("\nNenhuma transa√ß√£o cadastrada.")
            else:
                print("\n--- Lista de Transa√ß√µes ---")
                for t in transacoes_todas:
                    print(t)
                print("---------------------------\n")
        elif escolha == "3":
            saldo = gerenciador.calcular_saldo()
            print(f"\n>> Saldo Atual: R${saldo:.2f}")
        elif escolha == "4":
            # N√£o precisamos mais salvar explicitamente! O banco j√° est√° atualizado.
            # Utilizando JSON, precisamos salvar as altera√ß√µes antes de fechar o programa.
            print("\nObrigado por usar o Gerenciador de Finan√ßas! At√© logo üòâ")
            break

        else:
            print("\nOp√ß√£o inv√°lida. Por favor, tente novamente.")
